
 üè¶ Scenario:

You have been asked to design a basic ATM system for a bank. The goal is to ensure data security by hiding sensitive information like the PIN and account balance.
You must use encapsulation to protect these details and allow access only through specific methods.

---

üß© Problem Description:

Create a class called `ATM` that:

* Has two private fields:

  * `pin` (int) ‚Üí represents the secret PIN of the user.
  * `balance` (double) ‚Üí represents the user‚Äôs account balance.

* Provides the following methods:

  1. `checkPin(int inputPin)` ‚Üí
     Verifies whether the entered PIN matches the stored one.
     If the PIN is correct, allow further transactions.
     Otherwise, print ‚ÄúInvalid PIN! Access Denied.‚Äù

  2. `deposit(double amount)` ‚Üí
     Adds the given amount to the balance only if the correct PIN was entered before.
     If not, print ‚ÄúPlease verify your PIN first.‚Äù

  3. `withdraw(double amount)` ‚Üí
     Deducts the given amount from the balance only if the correct PIN was entered and sufficient funds are available.
     Otherwise, print the appropriate error message.

  4. `checkBalance()` ‚Üí
     Displays the current balance only if the PIN is correct.

---
================================================================================
package firstprojectt;

class Animal
{
	public void sound()
	{
		System.out.println("Animal makes a sound!");
	}
	
	public void eatsFood()
	{
		System.out.println("Every animal eats food!");
	}
}

class Dog extends Animal
{
	@Override
	public void sound()
	{
		System.out.println("Dog barks!!!");
	}
	
	public void work()
	{
		System.out.println("Dog guards the home!");
	}
	
}


public class Inheritance1 {

	public static void main(String[] args) {
		
		Dog d = new Dog();
		d.sound();
		
	}

}

==========================================================================
package firstprojectt;


class Person
{
	String name;
	int age;
	
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	public void displayDetails()
	{
		System.out.println(this.name);
		System.out.println(this.age);
	}
}

class Employeee extends Person
{
	
	String name;
	int age;
	int salary;
	String companyName;
	
	public Employeee(String name, int age, int salary, String companyName) {
		super(name, age);
		this.salary = salary;
		this.companyName = companyName;
	}

	
	public void displayDetails()
	{
		super.displayDetails();
		System.out.println(this.salary);
		System.out.println(this.companyName);
	}
}

public class Inheritance2 {

	public static void main(String[] args) {
		
		Person p = new Person("Ramu", 35);
		p.displayDetails();
		System.out.println("--------------------");
		Employeee e = new Employeee("Cook", 37, 50000, "ABC Company");
		e.displayDetails();

	}

}
