Question 6: Encapsulation â€” Wallet Management System ðŸ’°

You are designing a **digital wallet system** for a mobile payment app.
Each user has a **wallet** that securely manages their money â€” allowing them to add funds, spend money, and check their balance.

To ensure security and proper data handling, you need to implement this using **encapsulation** in JavaScript.

---

### ðŸ§© Scenario:

Imagine you are building a **Wallet** class for a fintech app like Paytm or Google Pay.

* The wallet starts with **â‚¹0**.
* Users can **add money** to their wallet, **spend money**, and **check their balance**.
* However, you must ensure that users cannot directly access or modify the balance â€” it should be **private**.

---

### ðŸ§± Requirements:

Create a class **`Wallet`** with the following specifications:

* **Private property:**

  * `amount` â†’ starts at `0`.

* **Methods:**

  1. **`addMoney(x)`** â†’ Adds money only if `x > 0`.
  2. **`spendMoney(x)`** â†’ Deducts money only if `x > 0` **and** `x â‰¤ balance`.
  3. **`getAmount()`** â†’ Returns the current wallet balance.

---

### ðŸ§® Input Format:

* **First line:** Integer â†’ number of operations
* **Next lines:** Each line contains one of the following operations:

  * `"add X"` â†’ Add â‚¹X to wallet
  * `"spend X"` â†’ Spend â‚¹X from wallet
  * `"amount"` â†’ Display current balance

---

### ðŸ“¥ Sample Input:

```
4
add 100
spend 40
amount
spend 100
```

---

### ðŸ“¤ Sample Output:

```
60
```
