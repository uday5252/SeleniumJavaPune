

üé¨ Question Explanation: Movie Ticket Booking System (OOP)

You have to build a program to handle movie ticket bookings ‚Äî but the key is that you must use Object-Oriented Programming (OOP).



üß± What You‚Äôre Building

You‚Äôre designing a system that can take multiple movie bookings.

There are two types of bookings:

1. Regular Booking
2. Premium Booking

Each booking has:

* A movie name
* A number of seats
* One extra feature, depending on the type of booking.



üßæ What Input You‚Äôll Get

You‚Äôll get:

1. The number of bookings (let‚Äôs say `n`)
2. Then `n` lines, where each line describes one booking in this format:

   ```
   BookingType MovieName Seats ExtraProperty
   ```



üß© Example

```
3
Regular Inception 2 Yes
Premium Interstellar 3 Yes
Regular Avatar 4 No
```

This means:

1Ô∏è‚É£ Regular booking for Inception, 2 seats, snacks = Yes
2Ô∏è‚É£ Premium booking for Interstellar, 3 seats, lounge access = Yes
3Ô∏è‚É£ Regular booking for Avatar, 4 seats, snacks = No



üß† What You Need to Do

You must:

1. Create classes to represent each type of booking:

   * A base class for common properties (movie name, seats)
   * Separate subclasses for `Regular` and `Premium` types

2. Each subclass should decide how to display details using its own logic.



üñ®Ô∏è What You Must Print (Output)

For every booking, print a line in this format:

```
Booking: MovieName - X seats - [Extra Details]
```

Where:

* Regular booking ‚Üí ‚ÄúSnacks Included‚Äù or ‚ÄúNo Snacks‚Äù
* Premium booking ‚Üí ‚ÄúLounge Access‚Äù or ‚ÄúNo Lounge Access‚Äù

=================================================================================================

 üöó Problem Statement: Vehicle Rental System

You are building a system to manage vehicle rentals for a travel company using Object-Oriented Programming principles.



 Input Format

* First line ‚Üí integer `n` (number of rentals)
* Next `n` lines ‚Üí each line contains rental details in the format:

  ```
  VehicleType VehicleName Days ExtraProperty
  ```



 Details

* `VehicleType` ‚Üí "Car" or "Bike" or "Truck"
* `VehicleName` ‚Üí string (‚â§ 50 characters)
* `Days` ‚Üí integer (> 0)
* `ExtraProperty`:

  * For Car ‚Üí `AC` (Yes / No)
  * For Bike ‚Üí `Helmet` (Yes / No)
  * For Truck ‚Üí `Helper` (Yes / No)



 Output Format

For each rental, print the details in this format:

```
Rental: VehicleName - X days - [Extra Details]
```



 Example Input

```
3
Car HondaCity 5 Yes
Bike Yamaha 2 No
Truck Tata 4 Yes
```



 Example Output

```
Rental: HondaCity - 5 days - AC Included
Rental: Yamaha - 2 days - No Helmet Provided
Rental: Tata - 4 days - Helper Included
```



 Requirements (OOP-based)

1. Create a base class `Vehicle`

   * Properties: `vehicleName`, `days`
   * Method: `getDetails()` ‚Üí should be overridden by subclasses.

2. Create subclasses:

   * `Car` (extra property: AC)
   * `Bike` (extra property: Helmet)
   * `Truck` (extra property: Helper)

3. Each subclass must override `getDetails()` to print type-specific information.



 üß† Concept Tested

* Polymorphism:
  Each subclass provides its own version of `getDetails()`.

* Inheritance:
  All subclasses share properties from `Vehicle`.

* Encapsulation:
  Each object manages its own state.



Would you like me to provide the full JavaScript OOP solution for this ‚ÄúVehicle Rental System‚Äù next?


